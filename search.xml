<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/11/02/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 驱动开发之字符设备]]></title>
      <url>/2017/03/22/drivers/</url>
      <content type="html"><![CDATA[<p>在Linux设备驱动中，相对简单的就属字符设备。可即使是这样，其开发的流程也比较复杂，相关知识也比较庞杂。本文就其内容简单梳理了字符设备驱动开发的流程和关键点。</p>
<a id="more"></a>
<h2 id="Linux-设备分类"><a href="#Linux-设备分类" class="headerlink" title="Linux 设备分类"></a>Linux 设备分类</h2><h3 id="在-Linux-系统中，设备驱动主要分为三大类：字符设备、块设备和网络设备。"><a href="#在-Linux-系统中，设备驱动主要分为三大类：字符设备、块设备和网络设备。" class="headerlink" title="在 Linux 系统中，设备驱动主要分为三大类：字符设备、块设备和网络设备。"></a>在 Linux 系统中，设备驱动主要分为三大类：字符设备、块设备和网络设备。</h3><ul>
<li><p>字符设备：<em>字符设备</em>是指每次与系统传输单个个字符的设备。这些设备不能随机读取设备内存中的某一数据，要按照先后顺序来读取数据。字符设备是面向流的设备，常见的字符设备有鼠标、键盘、串口、控制台和 LED 设备等。</p>
</li>
<li><p>块设备：块设备是指可以从设备的任意位置读取一定长度数据的设备。常见的块设备包括硬盘、磁盘、U 盘和 SD 卡等。</p>
</li>
<li><p>网络设备：网络设备在Linux系统中是一类比较特殊的设备，它不像字符设备或者块设备那样对应设备文件节点访问，内核也不再通过<code>read</code>，<code>write</code>等调用去访问网络设备。网络设备的驱动程序是内核代码的一部分，其地址空间是内核的地址空间。</p>
</li>
</ul>
<p>每一个字符设备或块设备都在<code>/dev</code>目录下对应一个设备文件。Linux 用户程序通过设备文件（或称设备节点）来使用驱动程序操作字符设备和块设备。</p>
<h2 id="几个关系"><a href="#几个关系" class="headerlink" title="几个关系"></a>几个关系</h2><h3 id="字符设备、字符设备驱动与用户空间访问该设备的程序三者之间的关系。"><a href="#字符设备、字符设备驱动与用户空间访问该设备的程序三者之间的关系。" class="headerlink" title="字符设备、字符设备驱动与用户空间访问该设备的程序三者之间的关系。"></a>字符设备、字符设备驱动与用户空间访问该设备的程序三者之间的关系。</h3><p><img src="http://ww3.sinaimg.cn/mw690/aa213e02jw1ermb61m7nuj20l107xaa4.jpg" alt="img"></p>
<p>如图，在 Linux 内核中使用<code>cdev</code>结构体来描述字符设备，通过其成员<code>dev_t</code>来定义设备号（分为主、次设备号）以确定字符设备的唯一性。通过其成员<code>file_operations</code>来定义字符设备驱动提供给<code>VFS</code>的接口函数，如常见的open()、read()、write()等。</p>
<p>在Linux字符设备驱动中，模块加载函数通过 register_chrdev_region( ) 或 alloc_chrdev_region( )来静态或者动态获取设备号，通过 cdev_init( )建立<code>cdev</code>与<code>file_operations</code>之间的连接，通过 cdev_add( )向系统添加一个<code>cdev</code>以完成注册。模块卸载函数通过 cdev_del( )来注销<code>cdev</code>，通过 unregister_chrdev_region( )来释放设备号。</p>
<p>用户空间访问该设备的程序通过 Linux 系统调用，如 open( )、read( )、write( )，来“调用” file_operations这个操作集，操作集中的函数就是字符设备驱动提供给VFS的接口函数。</p>
<h2 id="字符设备驱动模型"><a href="#字符设备驱动模型" class="headerlink" title="字符设备驱动模型"></a>字符设备驱动模型</h2><p><img src="http://ww3.sinaimg.cn/mw690/aa213e02jw1ermb611an6j20i20ccdh1.jpg" alt="img"></p>
<hr>
<h2 id="驱动初始化"><a href="#驱动初始化" class="headerlink" title="驱动初始化"></a>驱动初始化</h2><h3 id="分配-cdev"><a href="#分配-cdev" class="headerlink" title="分配 cdev"></a>分配 cdev</h3><p>在 2.6 的内核中使用 <code>cdev</code>结构体来描述字符设备，在驱动中分配<code>cdev</code>,其实主要是分配一个<code>cdev</code>结构体与申请设备号，以按键驱动为例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 分配 cdev */</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">btn_cdev</span>;</span></div><div class="line"><span class="comment">/* 申请设备号 */</span></div><div class="line"><span class="keyword">if</span>(major)&#123;</div><div class="line">  dev_id = MKDEV(major, <span class="number">0</span>);</div><div class="line">  register_chrdev_region(dev_id, <span class="number">1</span>, <span class="string">"button"</span>);   <span class="comment">// 静态申请设备号</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  alloc_chedev_region(&amp;dev_id, <span class="number">0</span>, <span class="number">1</span>, <span class="string">"button"</span>);  <span class="comment">// 动态申请设备号</span></div><div class="line">  major = MAJOR(dev_id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的代码中我们可以看到，申请设备号方式有两种：静态申请和动态申请，其实设备号还有主次之分。</p>
<p>在 Linux 中以主设备号用来标识与设备文件相连的驱动程序。次编号被驱动程序用来辨别操作的是哪个设备。<code>cdev</code>结构体的<code>dev_t</code>成员定义了设备号，为 32 位，其中高 12 位为主设备号，低20 位为次设备号。</p>
<p>设备号的获得与生成：</p>
<p>获得：主设备号：MAJOR(dev_t dev);      次设备号：MINOR(dev_t dev);</p>
<p>生成：MKDEV(int major,int minor);</p>
<p>静态申请设备号函数原型：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> from, <span class="keyword">unsigned</span> count, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</div><div class="line"><span class="comment">/* 功能：申请使用从from开始的count 个设备号(主设备号不变，次设备号增加） */</span></div></pre></td></tr></table></figure>
<p>静态申请相对较简单，但是一旦驱动被广泛使用,这个随机选定的主设备号可能会导致设备号冲突，而使驱动程序无法注册。</p>
<p>动态申请设备号函数原型：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">alloc_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> *dev, <span class="keyword">unsigned</span> baseminor, <span class="keyword">unsigned</span> count,<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</div><div class="line"><span class="comment">/* 功能：请求内核动态分配count个设备号，且次设备号从baseminor开始。 */</span></div></pre></td></tr></table></figure>
<p>动态申请简单，易于驱动推广，但是无法在安装驱动前创建设备文件（因为安装前还没有分配到主设备号）。</p>
<p>两种方式各有优缺点，可以结合着使用。</p>
<h3 id="初始化cdev"><a href="#初始化cdev" class="headerlink" title="初始化cdev"></a>初始化cdev</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdev_init</span><span class="params">(struct cdev *, struct file_operations *)</span></span>; </div><div class="line"><span class="comment">/* 功能：cdev_init()函数用于初始化 cdev 的成员，并建立 cdev 和 file_operations 之间的连接。 */</span></div></pre></td></tr></table></figure>
<h3 id="注册cdev"><a href="#注册cdev" class="headerlink" title="注册cdev"></a>注册cdev</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cdev_add</span><span class="params">(struct cdev *, <span class="keyword">dev_t</span>, <span class="keyword">unsigned</span>)</span></span>;</div><div class="line"><span class="comment">/* 功能：cdev_add()函数向系统添加一个 cdev，完成字符设备的注册. */</span></div></pre></td></tr></table></figure>
<h3 id="硬件初始化"><a href="#硬件初始化" class="headerlink" title="硬件初始化"></a>硬件初始化</h3><p>硬件初始化主要是硬件资源的申请与配置，以TQ210的按键驱动为例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gpio_request(S5PV210_GPH0(<span class="number">0</span>), <span class="string">"GPH0_0"</span>);  <span class="comment">//申请硬件GPIO资源</span></div><div class="line">gpio_direction_input(S5PV210_GPH0(<span class="number">0</span>));    <span class="comment">//配置输入</span></div></pre></td></tr></table></figure>
<h2 id="实现设备操作"><a href="#实现设备操作" class="headerlink" title="实现设备操作"></a>实现设备操作</h2><p>用户空间的程序以访问文件的形式访问字符设备，通常进行<code>open</code>、<code>read</code>、<code>write</code>、<code>close</code>等系统调用。而这些系统调用的最终落实则是<code>file_operations</code>结构体中成员函数，它们是字符设备驱动与内核的接口。以TQ210的按键驱动为例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 设备操作集合 */</span></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">btn_fops</span> = &#123;</span></div><div class="line">	.owner = THIS_MODULE,</div><div class="line">	.open = button_open,</div><div class="line"> 	.release = button_close,</div><div class="line">	.read = button_read</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码中的 button_open、button_close、button_read是要在驱动中自己实现的。file_operations结构体成员函数有很多个，下面就选几个常见的来展示：</p>
<h3 id="open-函数"><a href="#open-函数" class="headerlink" title="open() 函数"></a>open() 函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>(*open) (struct inode *, struct file*);</div></pre></td></tr></table></figure>
<h3 id="read-函数"><a href="#read-函数" class="headerlink" title="read() 函数"></a>read() 函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ssize_t</span>(*read)(struct file *, <span class="keyword">char</span> __user*, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span>*); </div><div class="line"><span class="comment">/* 功能：用来从设备中读取数据，成功时函数返回读取的字节数，出错时返回一个负值 */</span></div></pre></td></tr></table></figure>
<h3 id="write-函数"><a href="#write-函数" class="headerlink" title="write() 函数"></a>write() 函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ssize_t</span>(*write)(struct file *, <span class="keyword">const</span> char__user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span>*);</div><div class="line"><span class="comment">/* 功能：向设备发送数据，成功时该函数返回写入的字节数。如果此函数未被实现，当用户进行write()系统调用时，将得到-EINVAL返回值 */</span></div></pre></td></tr></table></figure>
<h3 id="close-函数"><a href="#close-函数" class="headerlink" title="close() 函数"></a>close() 函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>(*release)(struct inode *,struct file*);</div></pre></td></tr></table></figure>
<h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><p>第一点：在Linux字符设备驱动程序设计中，有3种非常重要的数据结构：<code>struct file</code>、<code>struct inode</code>、<code>struct file_operations</code>。</p>
<ul>
<li><p><code>struct file</code>代表一个打开的文件。系统中每个打开的文件在内核空间都有一个关联的<code>struct file</code>。它由内核在打开文件时创建, 在文件关闭后释放。其成员<code>loff_t f_pos</code> 表示文件读写位置。</p>
</li>
<li><p><code>struct inode</code> 用来记录文件的物理上的信息。因此,它和代表打开文件的 file 结构是不同的。一个文件可以对应多个 file 结构,但只有一个 inode 结构。其成员<code>dev_t i_rdev</code>表示设备号。</p>
</li>
<li><p><code>struct file_operations</code> 一个函数指针的集合，定义能在设备上进行的操作。结构中的成员指向驱动中的函数,这些函数实现一个特别的操作, 对于不支持的操作保留为 NULL。</p>
</li>
</ul>
<p>第二点：在 read( )和 write( )中的 buff 参数是用户空间指针。因此,它不能被内核代码直接引用，因为用户空间指针在内核空间时可能根本是无效的——没有那个地址的映射。因此，内核提供了专门的函数用于访问用户空间的指针：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">copy_from_user</span><span class="params">(<span class="keyword">void</span> *to, <span class="keyword">const</span> <span class="keyword">void</span> __user *from, <span class="keyword">unsigned</span> <span class="keyword">long</span> count)</span></span>; </div><div class="line"><span class="comment">/* 功能：在内核态下引用用户空间指针 */</span></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">copy_to_user</span><span class="params">(<span class="keyword">void</span> __user *to, <span class="keyword">const</span> <span class="keyword">void</span> *from, <span class="keyword">unsigned</span> <span class="keyword">long</span> count)</span></span>;  </div><div class="line"><span class="comment">/* 功能：在用户态下引用内核空间指针 */</span></div></pre></td></tr></table></figure>
<h2 id="驱动注销"><a href="#驱动注销" class="headerlink" title="驱动注销"></a>驱动注销</h2><h3 id="删除cdev"><a href="#删除cdev" class="headerlink" title="删除cdev"></a>删除cdev</h3><p>在字符设备驱动模块卸载函数中通过 cdev_del()函数向系统删除一个<code>cdev</code>，完成字符设备的注销。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdev_del</span><span class="params">(struct cdev *)</span></span>; <span class="comment">// 函数原型</span></div><div class="line">cdev_del(&amp;btn_cdev);    <span class="comment">// 一个实例</span></div></pre></td></tr></table></figure>
<h3 id="释放设备号"><a href="#释放设备号" class="headerlink" title="释放设备号"></a>释放设备号</h3><p>在调用 cdev_del()函数从系统注销字符设备之后，unregister_chrdev_region()应该被调用以释放原先申请的设备号。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">unregister_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> from, <span class="keyword">unsigned</span> count)</span></span>;  <span class="comment">// 函数原型</span></div><div class="line">unregister_chrdev_region(MKDEV(major, <span class="number">0</span>), <span class="number">1</span>);    <span class="comment">// 一个实例</span></div></pre></td></tr></table></figure>
<h2 id="字符设备驱动程序基础"><a href="#字符设备驱动程序基础" class="headerlink" title="字符设备驱动程序基础"></a>字符设备驱动程序基础</h2><h3 id="cdev结构体"><a href="#cdev结构体" class="headerlink" title="cdev结构体"></a>cdev结构体</h3><p>在Linux2.6 内核中，使用cdev结构体来描述一个字符设备，cdev结构体的定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> &#123;</span></div><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">kobject</span> <span class="title">kobj</span>;</span></div><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span>   <span class="comment">/* 通常为THIS_MODULE */</span></div><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">ops</span>;</span>  <span class="comment">/* 在cdev_init()这个函数里面与cdev结构联系起来 */</span></div><div class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></div><div class="line">  <span class="keyword">dev_t</span> dev;    <span class="comment">/* 设备号 */</span></div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> count;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>cdev</code> 结构体的<code>dev_t</code>成员定义了设备号，为 32位，其中 12位是主设备号，20位是次设备号，我们只需使用二个简单的宏就可以从dev_t 中获取主设备号和次设备号：</p>
<p><code>MAJOR(dev_t dev)</code></p>
<p><code>MINOR(dev_t dev)</code></p>
<p>相反地，可以通过主次设备号来生成 dev_t：</p>
<p><code>MKDEV(int major,int minor)</code></p>
<h3 id="操作cdev-结构体"><a href="#操作cdev-结构体" class="headerlink" title="操作cdev 结构体"></a>操作cdev 结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdev_init</span><span class="params">(struct cdev*,struct file_operations *)</span></span>;</div><div class="line"><span class="function">struct cdev *<span class="title">cdev_alloc</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cdev_add</span><span class="params">(struct cdev *,<span class="keyword">dev_t</span>,<span class="keyword">unsigned</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdev_del</span><span class="params">(struct cdev *)</span></span>;</div></pre></td></tr></table></figure>
<p>其中（1）用于初始化cdev结构体，并建立<code>cdev</code>与<code>file_operations</code>之间的连接。（2）用于动态分配一个<code>cdev</code>结构，（3）向内核注册一个<code>cdev</code>结构，（4）向内核注销一个<code>cdev</code>结构。</p>
<h3 id="分配和释放设备号"><a href="#分配和释放设备号" class="headerlink" title="分配和释放设备号"></a>分配和释放设备号</h3><p>在调用cdev_add()函数向系统注册字符设备之前，首先应向系统申请设备号，有二种方法申请设备号，一种是静态申请设备号：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> from,<span class="keyword">unsigned</span> count,<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></div></pre></td></tr></table></figure>
<p>另一种是动态申请设备号：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">alloc_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> *dev,<span class="keyword">unsigned</span> baseminor,<span class="keyword">unsigned</span> count,<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</div></pre></td></tr></table></figure>
<p>其中，静态申请是已知起始设备号的情况，如先使用 cat /proc/devices 命令查得哪个设备号未事先使用（不推荐使用静态申请）；动态申请是由系统自动分配，只需设置 major = 0 即可。</p>
<p>相反地，在调用 cdev_del()函数从系统中注销字符设备之后，应该向系统申请释放原先申请的设备号，使用：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">unregister_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> from,<span class="keyword">unsigned</span> count)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="cdev结构的file-operations结构体"><a href="#cdev结构的file-operations结构体" class="headerlink" title="cdev结构的file_operations结构体"></a>cdev结构的file_operations结构体</h3><p>这个结构体是字符设备当中最重要的结构体之一，<code>file_operations</code> 结构体中的成员函数指针是字符设备驱动程序设计的主体内容，这些函数实际上在应用程序进行 Linux 的 open()、read()、write()、close()、seek()、ioctl()等系统调用时最终被调用。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> &#123;</span></div><div class="line">		<span class="comment">/* 拥有该结构的模块计数，一般为THIS_MODULE */</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></div><div class="line">		<span class="comment">/* 用于修改文件当前的读写位置 */</span></div><div class="line">	<span class="keyword">loff_t</span> (*llseek) (struct file *, <span class="keyword">loff_t</span>, <span class="keyword">int</span>);</div><div class="line">		<span class="comment">/* 从设备中同步读取数据 */</span></div><div class="line">	<span class="keyword">ssize_t</span> (*read) (struct file *, <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);</div><div class="line">		<span class="comment">/* 向设备中写数据 */</span></div><div class="line">	<span class="keyword">ssize_t</span> (*write) (struct file *, <span class="keyword">const</span> <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);</div><div class="line"></div><div class="line">	<span class="keyword">ssize_t</span> (*aio_read) (struct kiocb *, <span class="keyword">const</span> struct iovec *, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">loff_t</span>);</div><div class="line">	<span class="keyword">ssize_t</span> (*aio_write) (struct kiocb *, <span class="keyword">const</span> struct iovec *, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">loff_t</span>);</div><div class="line">	<span class="keyword">int</span> (*readdir) (struct file *, <span class="keyword">void</span> *, <span class="keyword">filldir_t</span>);</div><div class="line">		<span class="comment">/* 轮询函数，判断目前是否可以进行非阻塞的读取或写入 */</span></div><div class="line">	<span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*poll)</span> <span class="params">(struct file *, struct poll_table_struct *)</span></span>;</div><div class="line">		<span class="comment">/* 执行设备的I/O命令 */</span></div><div class="line">	<span class="keyword">int</span> (*ioctl) (struct inode *, struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</div><div class="line"></div><div class="line">	<span class="keyword">long</span> (*unlocked_ioctl) (struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</div><div class="line">	<span class="keyword">long</span> (*compat_ioctl) (struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</div><div class="line">		<span class="comment">/* 用于请求将设备内存映射到进程地址空间 */</span></div><div class="line">	<span class="keyword">int</span> (*mmap) (struct file *, struct vm_area_struct *);</div><div class="line">		<span class="comment">/* 打开设备文件 */</span></div><div class="line">	<span class="keyword">int</span> (*open) (struct inode *, struct file *);</div><div class="line">	<span class="keyword">int</span> (*flush) (struct file *, <span class="keyword">fl_owner_t</span> id);</div><div class="line">		<span class="comment">/* 关闭设备文件 */</span></div><div class="line">	<span class="keyword">int</span> (*release) (struct inode *, struct file *);</div><div class="line"></div><div class="line">	<span class="keyword">int</span> (*fsync) (struct file *, struct dentry *, <span class="keyword">int</span> datasync);</div><div class="line">	<span class="keyword">int</span> (*aio_fsync) (struct kiocb *, <span class="keyword">int</span> datasync);</div><div class="line">	<span class="keyword">int</span> (*fasync) (<span class="keyword">int</span>, struct file *, <span class="keyword">int</span>);</div><div class="line">	<span class="keyword">int</span> (*lock) (struct file *, <span class="keyword">int</span>, struct file_lock *);</div><div class="line">	<span class="keyword">ssize_t</span> (*sendpage) (struct file *, struct page *, <span class="keyword">int</span>, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *, <span class="keyword">int</span>);</div><div class="line">	<span class="function"><span class="keyword">unsigned</span> <span class="title">long</span> <span class="params">(*get_unmapped_area)</span><span class="params">(struct file *, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>)</span></span>;</div><div class="line">	<span class="keyword">int</span> (*check_flags)(<span class="keyword">int</span>);</div><div class="line">	<span class="keyword">int</span> (*flock) (struct file *, <span class="keyword">int</span>, struct file_lock *);</div><div class="line">	<span class="keyword">ssize_t</span> (*splice_write)(struct pipe_inode_info *, struct file *, <span class="keyword">loff_t</span> *, <span class="keyword">size_t</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</div><div class="line">	<span class="keyword">ssize_t</span> (*splice_read)(struct file *, <span class="keyword">loff_t</span> *, struct pipe_inode_info *, <span class="keyword">size_t</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</div><div class="line">	<span class="keyword">int</span> (*setlease)(struct file *, <span class="keyword">long</span>, struct file_lock **);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="file结构"><a href="#file结构" class="headerlink" title="file结构"></a>file结构</h3><p>file 结构代表一个打开的文件，它的特点是一个文件可以对应多个 file 结构。它由内核再 open时创建，并传递给在该文件上操作的所有函数，直到最后 close函数，在文件的所有实例都被关闭之后，内核才释放这个数据结构。</p>
<p>在内核源代码中，指向 <code>struct file</code> 的指针通常比称为<code>filp</code>，<code>file</code>结构有以下几个重要的成员：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span>&#123;</span></div><div class="line">	<span class="keyword">mode_t</span> fmode;   <span class="comment">/* 文件模式，如FMODE_READ，FMODE_WRITE */</span></div><div class="line">	......</div><div class="line">	<span class="keyword">loff_t</span> f_pos;   <span class="comment">/* loff_t 是一个64位的数，需要时，须强制转换为32位 */</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> f_flags;  <span class="comment">/* 文件标志，如：O_NONBLOCK */</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">f_op</span>;</span></div><div class="line">	<span class="keyword">void</span> *private_data;   <span class="comment">/* 非常重要，用于存放转换后的设备描述结构指针 */</span></div><div class="line">	.......</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="inode-结构"><a href="#inode-结构" class="headerlink" title="inode 结构"></a>inode 结构</h3><p>内核用<code>inode</code> 结构在内部表示文件，它是实实在在的表示物理硬件上的某一个文件，且一个文件仅有一个<code>inode</code>与之对应，同样它有二个比较重要的成员：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span>&#123;</span></div><div class="line">	<span class="keyword">dev_t</span> i_rdev; <span class="comment">/*设备编号*/</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> *<span class="title">i_cdev</span>;</span> <span class="comment">/*cdev 是表示字符设备的内核的内部结构*/</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>可以从inode中获取主次设备号，使用下面二个宏：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">imajor</span><span class="params">(struct inode *inode)</span></span>;</div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">iminor</span><span class="params">(struct inode *inode)</span></span>;</div></pre></td></tr></table></figure></p>
<h3 id="字符设备驱动模块加载与卸载函数"><a href="#字符设备驱动模块加载与卸载函数" class="headerlink" title="字符设备驱动模块加载与卸载函数"></a>字符设备驱动模块加载与卸载函数</h3><p>在字符设备驱动模块加载函数中应该实现设备号的申请和<code>cdev</code> 结构的注册，而在卸载函数中应该实现设备号的释放与<code>cdev</code>结构的注销。</p>
<p>我们一般习惯将<code>cdev</code>内嵌到另外一个设备相关的结构体里面，该设备包含所涉及的<code>cdev</code>、私有数据及信号量等等信息。常见的设备结构体、模块加载函数、模块卸载函数形式如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 设备结构体 */</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xxx_dev</span>&#123;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">cdev</span>;</span></div><div class="line">	<span class="keyword">char</span> *data;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span> <span class="title">sem</span>;</span></div><div class="line">	......</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/*模块加载函数*/</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">xxx_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">	.......</div><div class="line">	初始化cdev结构;</div><div class="line">	申请设备号；</div><div class="line">	注册设备号；</div><div class="line">	申请分配设备结构体的内存； <span class="comment">// 非必须</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*模块卸载函数*/</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">xxx_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">	.......	</div><div class="line">	释放原先申请的设备号；</div><div class="line">	释放原先申请的内存；</div><div class="line">	注销cdev设备；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="字符设备驱动的-file-operations-结构体重成员函数"><a href="#字符设备驱动的-file-operations-结构体重成员函数" class="headerlink" title="字符设备驱动的 file_operations 结构体重成员函数"></a>字符设备驱动的 file_operations 结构体重成员函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/* 读设备 */</span></div><div class="line"><span class="keyword">ssize_t</span> xxx_read(struct file *filp, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *f_pos) &#123;</div><div class="line">	......</div><div class="line"> 	使用filp-&gt;private_data获取设备结构体指针；</div><div class="line"> 	分析和获取有效的长度；</div><div class="line"> 		<span class="comment">/* 内核空间到用户空间的数据传递 */</span></div><div class="line">	copy_to_user(<span class="keyword">void</span> __user *to, <span class="keyword">const</span> <span class="keyword">void</span> *from, <span class="keyword">unsigned</span> <span class="keyword">long</span> count);</div><div class="line"> 	......</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">/* 写设备 */</span></div><div class="line"> <span class="keyword">ssize_t</span> xxx_write(struct file *filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *f_pos)&#123;</div><div class="line">	......</div><div class="line">	使用filp-&gt;private_data获取设备结构体指针；</div><div class="line">   	分析和获取有效的长度；</div><div class="line">		<span class="comment">/* 用户空间到内核空间的数据传递 */</span></div><div class="line">   	copy_from_user(<span class="keyword">void</span> *to, <span class="keyword">const</span> <span class="keyword">void</span> __user *from, <span class="keyword">unsigned</span> <span class="keyword">long</span> count);</div><div class="line"> 	......</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">/* ioctl函数 */</span></div><div class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">xxx_ioctl</span><span class="params">(struct inode *inode,struct file *filp,<span class="keyword">unsigned</span> <span class="keyword">int</span> cmd,<span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span>&#123;</div><div class="line">      ......</div><div class="line">   	<span class="keyword">switch</span>(cmd)&#123;</div><div class="line">		<span class="keyword">case</span> xxx_CMD1:</div><div class="line">			......</div><div class="line"> 			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> xxx_CMD2:</div><div class="line"> 			.......</div><div class="line"> 			<span class="keyword">break</span>;</div><div class="line">   		<span class="keyword">default</span>:</div><div class="line"> 			<span class="keyword">return</span> -ENOTTY;  <span class="comment">/* 不能支持的命令 */</span></div><div class="line">    &#125;</div><div class="line">   	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="字符设备驱动文件操作结构体模板"><a href="#字符设备驱动文件操作结构体模板" class="headerlink" title="字符设备驱动文件操作结构体模板"></a>字符设备驱动文件操作结构体模板</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">xxx_fops</span> = &#123;</span></div><div class="line">	.owner = THIS_MODULE,</div><div class="line">	.open = xxx_open,</div><div class="line">	.read = xxx_read,</div><div class="line">	.write = xxx_write,</div><div class="line">	.close = xxx_release,</div><div class="line">	.ioctl = xxx_ioctl,</div><div class="line">	.lseek = xxx_llseek,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的写法需要注意二点，一：结构体成员之间是以逗号分开的而不是分号，结构体字段结束时最后应加上分号。</p>
<h2 id="字符设备驱动小结"><a href="#字符设备驱动小结" class="headerlink" title="字符设备驱动小结"></a>字符设备驱动小结</h2><p>字符设备是3大类设备（字符设备、块设备、网络设备）中较简单的一类设备，其驱动程序中完成的主要工作是初始化、添加和删除<code>cdev</code>结构体，申请和释放设备号，以及填充<code>file_operation</code>结构体中操作函数，并实现<code>file_operations</code>结构体中的read()、write()、ioctl()等重要函数。如图所示为<code>cdev</code>结构体、<code>file_operations</code>和用户空间调用驱动的关系。</p>
<p><img src="http://ww2.sinaimg.cn/mw690/aa213e02jw1ermb5z6kaqj20ia0angmh.jpg" alt="img"></p>
]]></content>
      
        <categories>
            
            <category> 基础知识学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Driver </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
