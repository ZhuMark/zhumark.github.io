<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Sharding-JDBC分库分表</title>
      <link href="/2019/03/09/Sharding-JDBC%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
      <url>/2019/03/09/Sharding-JDBC%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>目前比较流行的基于关系型数据库的数据库中间层有 MyCat 和 Sharding-JDBC，网上介绍 MyCat 相关内容的文章比较多而 Sharding-JDBC 的相对较少，特整理了相关信息，简述一下 Sharding-JDBC 分表分库的有关内容。</p><a id="more"></a><h2 id="Sharding-JDBC简介"><a href="#Sharding-JDBC简介" class="headerlink" title="Sharding-JDBC简介"></a>Sharding-JDBC简介</h2><p>Sharding-JDBC 是当当网自研的关系型数据库的水平扩展框架，现在已经捐献给 Apache，是 <a href="https://shardingsphere.apache.org/" target="_blank" rel="noopener">Apache ShardingSphere</a>（一套开源的分布式数据库中间件解决方案组成的生态圈）的一部分。Sharding-JDBC 采用在 JDBC 协议层扩展分库分表，是一个以 jar 形式提供服务的轻量级组件，其核心思路是小而美地完成最核心的事情。Sharding-JDBC 的设计初衷是想提供一个数据库中间层，用于透明的处理分库分表，而无需业务开发人员在业务代码中根据分片键生成 SQL。主要适用场景为水平拆库和拆表，不太适合 OLAP 的场景和事务强一致的要求。</p><p>接下来说说分库分表的概念：</p><blockquote><p>分库分表分为水平拆分和垂直拆分。按照业务分库或分表属于垂直拆分。水平拆分是将同样的库或表按照一定的分片规则拆成多个。</p></blockquote><p>分库和分表都可以有效的处理由于数据量大而导致的查询性能下降的问题。分库还可以缓解高并发对数据库带来的压力，但仅分表可以使用本地事务代替分布式事务。因此分库和分表的合理使用是需要根据业务场景来决定的。</p><h2 id="案例场景"><a href="#案例场景" class="headerlink" title="案例场景"></a>案例场景</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>上面介绍了 Sharding-JDBC 的基本情况，再具体的可以在官网手册中了解。接下来介绍案例场景，本案例创建了2个数据库 database0 和 database1，并且每个数据库都有2个数据表 goods_0 和 goods_1，如下图所示。左边蓝色代表 database0 中的表，右边橘色代表 database1 中的表，上边绿色 goods 表示虚拟表（逻辑表，不存在）。</p><p><img src="https://i.loli.net/2019/02/12/5c623ef518503.png" alt="分表分库"></p><h3 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h3><p>本案例根据 goods_id 的大小进行判断，如果 goods_id 大于20则使用 database0，否则使用 database1。</p><h3 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h3><p>本案例根据数据库 goods_type 的数值的奇偶进行判断，奇数使用 goods_1 表，偶数使用 goods_0 表。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>本文使用 Spring Boot 2.1.2 , SpringData-JPA，Druid 和 Sharding-JDBC。</p><h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><p><img src="https://i.loli.net/2019/02/12/5c626cad32b9a.png" alt="sharding-jdbc-project-structure"></p><h3 id="建表SQL"><a href="#建表SQL" class="headerlink" title="建表SQL"></a>建表SQL</h3><p>首先创建需要用到的数据库和表，创建表和数据库的SQL如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE database0;</span><br><span class="line">USE database0;</span><br><span class="line">DROP TABLE IF EXISTS `goods_0`;</span><br><span class="line">CREATE TABLE `goods_0` (</span><br><span class="line">  `goods_id` bigint(20) NOT NULL,</span><br><span class="line">  `goods_name` varchar(100) COLLATE utf8_bin NOT NULL,</span><br><span class="line">  `goods_type` bigint(20) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`goods_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</span><br><span class="line">DROP TABLE IF EXISTS `goods_1`;</span><br><span class="line">CREATE TABLE `goods_1` (</span><br><span class="line">  `goods_id` bigint(20) NOT NULL,</span><br><span class="line">  `goods_name` varchar(100) COLLATE utf8_bin NOT NULL,</span><br><span class="line">  `goods_type` bigint(20) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`goods_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE database1;</span><br><span class="line">USE database1;</span><br><span class="line">DROP TABLE IF EXISTS `goods_0`;</span><br><span class="line">CREATE TABLE `goods_0` (</span><br><span class="line">  `goods_id` bigint(20) NOT NULL,</span><br><span class="line">  `goods_name` varchar(100) COLLATE utf8_bin NOT NULL,</span><br><span class="line">  `goods_type` bigint(20) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`goods_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `goods_1`;</span><br><span class="line">CREATE TABLE `goods_1` (</span><br><span class="line">  `goods_id` bigint(20) NOT NULL,</span><br><span class="line">  `goods_name` varchar(100) COLLATE utf8_bin NOT NULL,</span><br><span class="line">  `goods_type` bigint(20) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`goods_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;</span><br></pre></td></tr></table></figure><h3 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h3><p>新建项目，加入当当的 sharding-jdbc-core 依赖和 druid 连接池，完整 pom 如下所示。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.zhumark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingjdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>shardingjdbc<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dangdang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><p>在配置信息中配置了两个数据库的信息和 JPA 的简单配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spring configuration</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># database01 configuration</span></span><br><span class="line"><span class="attr">database0:</span></span><br><span class="line"><span class="attr">  databaseName:</span> <span class="string">database0</span></span><br><span class="line"><span class="attr">  driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">  password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  url:</span> <span class="attr">jdbc:mysql://localhost:3306/database0?useUnicode=true&amp;characterEncoding=utf8&amp;characterSetResults=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># database01 configuration</span></span><br><span class="line"><span class="attr">database1:</span></span><br><span class="line"><span class="attr">  databaseName:</span> <span class="string">database1</span></span><br><span class="line"><span class="attr">  driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">  password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  url:</span> <span class="attr">jdbc:mysql://localhost:3306/database1?useUnicode=true&amp;characterEncoding=utf8&amp;characterSetResults=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><p>启动类使用 @SpringBootApplication(exclude = {DataSourceAutoConfiguration.class}) 禁用数据库自动配置，使用 @EnableTransactionManagement 开启事务，使用 @EnableConfigurationProperties 注解加入配置实体，启动类完整代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhumark.shardingjdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShardingjdbcApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ShardingjdbcApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类和数据库操作层"><a href="#实体类和数据库操作层" class="headerlink" title="实体类和数据库操作层"></a>实体类和数据库操作层</h3><p>简单的实体和Repository，只不过在Repository内加入between方法和in方法用于测试，代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhumark.shardingjdbc.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"goods"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long goodsId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String goodsName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long goodsType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhumark.shardingjdbc.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.zhumark.shardingjdbc.entity.Goods;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Goods</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Goods&gt; <span class="title">findAllByGoodsIdBetween</span><span class="params">(Long goodsId1,Long goodsId2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Goods&gt; <span class="title">findAllByGoodsIdIn</span><span class="params">(List&lt;Long&gt; goodsIds)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>本文使用了两个实体来接收数据库信息，并且创建数据源。两个数据库配置类代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhumark.shardingjdbc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"database0"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Database0Config</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String databaseName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource result = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        result.setDriverClassName(getDriverClassName());</span><br><span class="line">        result.setUrl(getUrl());</span><br><span class="line">        result.setUsername(getUsername());</span><br><span class="line">        result.setPassword(getPassword());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhumark.shardingjdbc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"database1"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Database1Config</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String databaseName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource result = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        result.setDriverClassName(getDriverClassName());</span><br><span class="line">        result.setUrl(getUrl());</span><br><span class="line">        result.setUsername(getUsername());</span><br><span class="line">        result.setPassword(getPassword());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来新建 DataSourceConfig 用于创建数据源和使用分库分表策略，其中分库分表策略会调用分库算法类和分表算法类，DataSourceConfig 类代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhumark.shardingjdbc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.zhumark.shardingjdbc.algorithm.DatabaseShardingAlgorithm;</span><br><span class="line"><span class="keyword">import</span> cn.zhumark.shardingjdbc.algorithm.TableShardingAlgorithm;</span><br><span class="line"><span class="keyword">import</span> com.dangdang.ddframe.rdb.sharding.api.ShardingDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> com.dangdang.ddframe.rdb.sharding.api.rule.DataSourceRule;</span><br><span class="line"><span class="keyword">import</span> com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule;</span><br><span class="line"><span class="keyword">import</span> com.dangdang.ddframe.rdb.sharding.api.rule.TableRule;</span><br><span class="line"><span class="keyword">import</span> com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.dangdang.ddframe.rdb.sharding.keygen.DefaultKeyGenerator;</span><br><span class="line"><span class="keyword">import</span> com.dangdang.ddframe.rdb.sharding.keygen.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Database0Config database0Config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Database1Config database1Config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DatabaseShardingAlgorithm databaseShardingAlgorithm;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TableShardingAlgorithm tableShardingAlgorithm;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DataSource <span class="title">buildDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//分库设置</span></span><br><span class="line">        Map&lt;String, DataSource&gt; dataSourceMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//添加两个数据库database0和database1</span></span><br><span class="line">        dataSourceMap.put(database0Config.getDatabaseName(), database0Config.createDataSource());</span><br><span class="line">        dataSourceMap.put(database1Config.getDatabaseName(), database1Config.createDataSource());</span><br><span class="line">        <span class="comment">//设置默认数据库</span></span><br><span class="line">        DataSourceRule dataSourceRule = <span class="keyword">new</span> DataSourceRule(dataSourceMap, database0Config.getDatabaseName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分表设置，大致思想就是将查询虚拟表Goods根据一定规则映射到真实表中去</span></span><br><span class="line">        TableRule orderTableRule = TableRule.builder(<span class="string">"goods"</span>)</span><br><span class="line">                .actualTables(Arrays.asList(<span class="string">"goods_0"</span>, <span class="string">"goods_1"</span>))</span><br><span class="line">                .dataSourceRule(dataSourceRule)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分库分表策略</span></span><br><span class="line">        ShardingRule shardingRule = ShardingRule.builder()</span><br><span class="line">                .dataSourceRule(dataSourceRule)</span><br><span class="line">                .tableRules(Arrays.asList(orderTableRule))</span><br><span class="line">                .databaseShardingStrategy(<span class="keyword">new</span> DatabaseShardingStrategy(<span class="string">"goods_id"</span>, databaseShardingAlgorithm))</span><br><span class="line">                .tableShardingStrategy(<span class="keyword">new</span> TableShardingStrategy(<span class="string">"goods_type"</span>, tableShardingAlgorithm)).build();</span><br><span class="line">        DataSource dataSource = ShardingDataSourceFactory.createDataSource(shardingRule);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKeyGenerator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分库分表算法"><a href="#分库分表算法" class="headerlink" title="分库分表算法"></a>分库分表算法</h3><p>由于这里只是简单的分库分表样例，所以分库类这里实现 SingleKeyDatabaseShardingAlgorithm 类，采用了单分片键数据源分片算法，需要重写三个方法，分别是：</p><ul><li>doEqualSharding：SQL中==的规则。</li><li>doInSharding：SQL中in的规则。</li><li>doBetweenSharding：SQL中between的规则。</li></ul><p>本文分库规则是基于值大于20则使用 database0，其余使用 database1，所以简单 if 语句就搞定了，分库算法类 DatabaseShardingAlgorithm 代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhumark.shardingjdbc.algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.zhumark.shardingjdbc.config.Database0Config;</span><br><span class="line"><span class="keyword">import</span> cn.zhumark.shardingjdbc.config.Database1Config;</span><br><span class="line"><span class="keyword">import</span> com.dangdang.ddframe.rdb.sharding.api.ShardingValue;</span><br><span class="line"><span class="keyword">import</span> com.dangdang.ddframe.rdb.sharding.api.strategy.database.SingleKeyDatabaseShardingAlgorithm;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Range;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseShardingAlgorithm</span> <span class="keyword">implements</span> <span class="title">SingleKeyDatabaseShardingAlgorithm</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Database0Config database0Config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Database1Config database1Config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doEqualSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, ShardingValue&lt;Long&gt; shardingValue)</span> </span>&#123;</span><br><span class="line">        Long value = shardingValue.getValue();</span><br><span class="line">        <span class="keyword">if</span> (value &lt;= <span class="number">20L</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> database0Config.getDatabaseName();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> database1Config.getDatabaseName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">doInSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, ShardingValue&lt;Long&gt; shardingValue)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; result = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(availableTargetNames.size());</span><br><span class="line">        <span class="keyword">for</span> (Long value : shardingValue.getValues()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &lt;= <span class="number">20L</span>) &#123;</span><br><span class="line">                result.add(database0Config.getDatabaseName());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.add(database1Config.getDatabaseName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">doBetweenSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                ShardingValue&lt;Long&gt; shardingValue)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; result = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(availableTargetNames.size());</span><br><span class="line">        Range&lt;Long&gt; range = shardingValue.getValueRange();</span><br><span class="line">        <span class="keyword">for</span> (Long value = range.lowerEndpoint(); value &lt;= range.upperEndpoint(); value++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &lt;= <span class="number">20L</span>) &#123;</span><br><span class="line">                result.add(database0Config.getDatabaseName());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.add(database1Config.getDatabaseName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分表和分库类似，无非就是实现的类不一样，实现了 SingleKeyTableShardingAlgorithm 类，策略使用值奇偶分表，分表算法类 TableShardingAlgorithm 如代码清单所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhumark.shardingjdbc.algorithm;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dangdang.ddframe.rdb.sharding.api.ShardingValue;</span><br><span class="line"><span class="keyword">import</span> com.dangdang.ddframe.rdb.sharding.api.strategy.table.SingleKeyTableShardingAlgorithm;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Range;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableShardingAlgorithm</span> <span class="keyword">implements</span> <span class="title">SingleKeyTableShardingAlgorithm</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doEqualSharding</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; tableNames, <span class="keyword">final</span> ShardingValue&lt;Long&gt; shardingValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String each : tableNames) &#123;</span><br><span class="line">            <span class="keyword">if</span> (each.endsWith(shardingValue.getValue() % <span class="number">2</span> + <span class="string">""</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> each;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">doInSharding</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; tableNames, <span class="keyword">final</span> ShardingValue&lt;Long&gt; shardingValue)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; result = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(tableNames.size());</span><br><span class="line">        <span class="keyword">for</span> (Long value : shardingValue.getValues()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String tableName : tableNames) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tableName.endsWith(value % <span class="number">2</span> + <span class="string">""</span>)) &#123;</span><br><span class="line">                    result.add(tableName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">doBetweenSharding</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; tableNames,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                <span class="keyword">final</span> ShardingValue&lt;Long&gt; shardingValue)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; result = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(tableNames.size());</span><br><span class="line">        Range&lt;Long&gt; range = shardingValue.getValueRange();</span><br><span class="line">        <span class="keyword">for</span> (Long i = range.lowerEndpoint(); i &lt;= range.upperEndpoint(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String each : tableNames) &#123;</span><br><span class="line">                <span class="keyword">if</span> (each.endsWith(i % <span class="number">2</span> + <span class="string">""</span>)) &#123;</span><br><span class="line">                    result.add(each);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试Controller"><a href="#测试Controller" class="headerlink" title="测试Controller"></a>测试Controller</h3><p>接下来创建一个Controller进行测试，保存方法使用了插入40条数据，根据我们的规则，会每个库插入20条，同时还创建了三个查询方法，分别是查询全部，between查询，in查询，还有删除全部方法。Controller类代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zhumark.shardingjdbc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.zhumark.shardingjdbc.entity.Goods;</span><br><span class="line"><span class="keyword">import</span> cn.zhumark.shardingjdbc.repository.GoodsRepository;</span><br><span class="line"><span class="keyword">import</span> com.dangdang.ddframe.rdb.sharding.keygen.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KeyGenerator keyGenerator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsRepository goodsRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40</span>; i++) &#123;</span><br><span class="line">            Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line">            goods.setGoodsId((<span class="keyword">long</span>) i);</span><br><span class="line">            goods.setGoodsName(<span class="string">"shangpin"</span> + i);</span><br><span class="line">            goods.setGoodsType((<span class="keyword">long</span>) (i + <span class="number">1</span>));</span><br><span class="line">            goodsRepository.save(goods);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"select"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> goodsRepository.findAll().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        goodsRepository.deleteAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"query1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">query1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> goodsRepository.findAllByGoodsIdBetween(<span class="number">10L</span>, <span class="number">30L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"query2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">query2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Long&gt; goodsIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        goodsIds.add(<span class="number">10L</span>);</span><br><span class="line">        goodsIds.add(<span class="number">15L</span>);</span><br><span class="line">        goodsIds.add(<span class="number">20L</span>);</span><br><span class="line">        goodsIds.add(<span class="number">25L</span>);</span><br><span class="line">        <span class="keyword">return</span> goodsRepository.findAllByGoodsIdIn(goodsIds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用测试"><a href="#应用测试" class="headerlink" title="应用测试"></a>应用测试</h3><p>启动应用，在浏览器或HTTP请求工具访问<a href="http://localhost:8080/save" target="_blank" rel="noopener">http://localhost:8080/save</a>，返回success即为正常。</p><p>访问<a href="http://localhost:8080/select" target="_blank" rel="noopener">http://localhost:8080/select</a>，可以看到数据数组证明插入数据没问题。</p><p>然后查看一下数据库 database0 和 database1，每个表都有十条数据，有即为正常。</p><p>从上面测试的结果中能够看出分库分表已经按照我们的策略来进行插入，至于其他几个测试这里就不做介绍了，无论是查询和删除都是可以成功的。</p><p>以上就是关于 Sharding-JDBC 分库分表的全部内容，刚开始可能用起来不是很习惯，但对于大数据的分库分表这才只是个开始。</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 分表分库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP代理浅谈</title>
      <link href="/2019/03/09/http%E4%BB%A3%E7%90%86%E6%B5%85%E8%B0%88/"/>
      <url>/2019/03/09/http%E4%BB%A3%E7%90%86%E6%B5%85%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Web代理(proxy)服务器是网络的中间实体。代理位于客户端和服务器之间，扮演“中间人”的角色，在各端点之间来回传送HTTP报文。</p></blockquote><p>上面这段话来自《HTTP权威指南》，介绍了代理的定义并说明了其作用。现代网络系统中，Web代理无处不在，足可见其重要性。下文将介绍HTTP常见代理的相关知识和概念，包括正向代理，反向代理和透明代理，希望读者能有所收获。</p><a id="more"></a><h2 id="一、正向代理（Forward-Proxy）"><a href="#一、正向代理（Forward-Proxy）" class="headerlink" title="一、正向代理（Forward Proxy）"></a>一、正向代理（Forward Proxy）</h2><p>一般情况下，如果没有特别说明，代理技术默认说的是正向代理技术。关于正向代理的概念如下：</p><p>正向代理是一个位于客户端和目标服务器之间的代理服务器(中间服务器)。为了从原始服务器取得内容，客户端向代理服务器发送一个请求，并且指定目标服务器，之后代理向目标服务器转交并且将获得的内容返回给客户端。正向代理的情况下客户端必须要进行一些特别的设置才能使用。</p><p>HTTP代理存在两种形式，相关介绍如下：</p><p>第一种是 <a href="https://tools.ietf.org/html/rfc7230" target="_blank" rel="noopener">RFC 7230 - HTTP/1.1: Message Syntax and Routing</a>（即修订后的 RFC 2616，HTTP/1.1 协议的第一部分）描述的普通代理。这种代理扮演的是「中间人」角色，对于连接到它的客户端来说，它是服务端；对于要连接的服务端来说，它是客户端。它就负责在两端之间来回传送 HTTP 报文。</p><p>第二种是 <a href="https://tools.ietf.org/html/draft-luotonen-web-proxy-tunneling-01" target="_blank" rel="noopener">Tunneling TCP based protocols through Web proxy servers</a>（通过 Web 代理服务器用隧道方式传输基于 TCP 的协议）描述的隧道代理。它通过 HTTP 协议正文部分（Body）完成通讯，以 HTTP 的方式实现任意基于 TCP 的应用层协议代理。这种代理使用 HTTP 的 CONNECT 方法建立连接，但 CONNECT 最开始并不是 RFC 2616 - HTTP/1.1 的一部分，直到 2014 年发布的 HTTP/1.1 修订版中，才增加了对 CONNECT 及隧道代理的描述，详见 <a href="https://tools.ietf.org/html/rfc7231#section-4.3.6" target="_blank" rel="noopener">RFC 7231 - HTTP/1.1: Semantics and Content</a>。实际上这种代理早就被广泛实现。</p><p>本文描述的第一种代理，对应《HTTP 权威指南》一书中第六章「代理」；第二种代理，对应第八章「集成点：网关、隧道及中继」中的 8.5 小节「隧道」。</p><h3 id="普通代理"><a href="#普通代理" class="headerlink" title="普通代理"></a>普通代理</h3><p>第一种 Web 代理原理如下：</p><blockquote><p>HTTP 客户端向代理发送请求报文，代理服务器需要正确地处理请求和连接（例如正确处理 Connection: keep-alive），同时向服务器发送请求，并将收到的响应转发给客户端。</p></blockquote><p>《HTTP权威指南》如此描述上述行为：</p><p><img src="https://i.loli.net/2019/01/31/5c52b798dd5a6.png" alt="web_proxy.png"></p><p>这种方式的代理通常都是依靠修改HTTP请求头部实现，通过<code>x-Forwarded-IP</code>这样的自定义头部告诉服务端真正的客户端 IP，但服务器无法验证这个自定义头部真的是由代理添加，还是客户端修改了请求头，所以这个字段通常只有参考意义。 <code>X-Forwarded-For</code> 是 <code>Squid</code> 缓存代理服务软件引入的，目前已经在规范化在 <a href="https://tools.ietf.org/html/rfc7239" target="_blank" rel="noopener">RFC 7239</a> 文档。</p><p><code>X-Forwarded-For</code> 头部格式也比较简单，比如某个服务器接受到请求的对应头部可能是：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">X-Forwarded-For:</span> <span class="string">client,</span> <span class="string">proxy1,</span> <span class="string">proxy2</span></span><br></pre></td></tr></table></figure><p>对应的值有多个字段，每个字段代表中间的一个节点，它们之间由逗号和空格隔开，从左到右距离当前节点越来越近。最终客户端或者服务器端接受的请求， <code>X-Forwarded-For</code> 是没有最邻近节点的 ip 地址的，而这个地址可以通过 <code>remote address</code> 获取。</p><p>每个代理服务器会在 <code>X-Forwarded-For</code> 头部填上前一个节点的 ip 地址，这个地址可以通过 TCP 请求的 remote address 获取。为什么每个代理服务器不填写自己的 ip 地址呢？有两个原因，如果由代理服务器填写自己的 ip 地址，那么代理可以很简单地伪造这个地址，而上一个节点的 remote address 是根据 TCP 连接获取的（如果不建立正确的 TCP 连接是无法进行 HTTP 通信的）；另外一个原因是如果由当前节点填写 <code>X-Forwarded-For</code> ，那么很多情况客户端无法判断自己是否会通过代理的。</p><p>以上介绍的内容是第一种正向代理的实现原理，接下来就可用任意支持网络编程的语言实现，以加深理解。这里我选择使用 golang 实现，其他语言类似。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Pxy <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pxy)</span> <span class="title">ServeHTTP</span><span class="params">(rw http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Received request %s %s %s\n"</span>, req.Method, req.Host, req.RemoteAddr)</span><br><span class="line"></span><br><span class="line">transport := http.DefaultTransport</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 1</span></span><br><span class="line">outReq := <span class="built_in">new</span>(http.Request)</span><br><span class="line">*outReq = *req <span class="comment">// this only does shallow copies of maps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> clientIP, _, err := net.SplitHostPort(req.RemoteAddr); err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> prior, ok := outReq.Header[<span class="string">"X-Forwarded-For"</span>]; ok &#123;</span><br><span class="line">clientIP = strings.Join(prior, <span class="string">", "</span>) + <span class="string">", "</span> + clientIP</span><br><span class="line">&#125;</span><br><span class="line">outReq.Header.Set(<span class="string">"X-Forwarded-For"</span>, clientIP)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 2</span></span><br><span class="line">res, err := transport.RoundTrip(outReq)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rw.WriteHeader(http.StatusBadGateway)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 3</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> res.Header &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> value &#123;</span><br><span class="line">rw.Header().Add(key, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rw.WriteHeader(res.StatusCode)</span><br><span class="line">io.Copy(rw, res.Body)</span><br><span class="line">res.Body.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Serve on :8080"</span>)</span><br><span class="line">http.Handle(<span class="string">"/"</span>, &amp;Pxy&#123;&#125;)</span><br><span class="line">http.ListenAndServe(<span class="string">"0.0.0.0:8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码比较直观，只包含了最核心的代码逻辑，完全按照最上面的代理图例进行组织。一共分成几个步骤：</p><ol><li>代理接收到客户端的请求，复制了原来的请求对象，并根据数据配置新请求的各种参数（添加上 <code>X-Forward-For</code> 头部等）</li><li>把新请求发送到服务器端，并接收到服务器端返回的响应</li><li>代理服务器对响应做一些处理，然后返回给客户端</li></ol><p>上面的代码运行之后，会在本地的 <code>8080</code> 端口启动代理服务。修改浏览器的代理为 <code>127.0.0.1:8080</code> 再访问网站，可以验证代理正常工作，也能看到它在终端打印出所有的请求信息。</p><p>这个代理目前不支持 HTTPS 协议，因为它只提供了 HTTP 请求的转发功能，并没有处理证书和认证有关的内容。这种代理的本质是中间人，而 HTTPS 网站的证书认证机制是中间人劫持的克星。普通的 HTTPS 服务中，服务端不验证客户端的证书，中间人可以作为客户端与服务端成功完成 TLS 握手；但是中间人没有证书私钥，无论如何也无法伪造成服务端跟客户端建立 TLS 连接。虽然代理可以和真正的服务器建立连接（知道了对方的公钥和证书），但是代理无法代表服务器和客户端建立连接，因为代理服务器无法知道真正服务器的私钥。</p><h2 id="隧道代理"><a href="#隧道代理" class="headerlink" title="隧道代理"></a>隧道代理</h2><blockquote><p>HTTP 客户端通过 CONNECT 方法请求隧道代理创建一条到达任意目的服务器和端口的 TCP 连接，并对客户端和服务器之间的后继数据进行盲转发。</p></blockquote><p>下面这张图片同样来自于《HTTP 权威指南》，直观地展示了上述行为：</p><p><img src="https://i.loli.net/2019/01/31/5c52b79927236.png" alt="web_tunnel.png"></p><p>这种方式的代理使用了 HTTP 的另一种用法——Web 隧道，可以通过 HTTP 应用程序访问使用非 HTTP 协议的应用程序。Web 隧道允许用户通过 HTTP 连接发送非 HTTP 流量，这样就可以捎带上其他协议的数据，达到网络资源复用的目的，减少带宽占用。Web 隧道使用 HTTP 的 CONNECT 方法建立起来，这个方法其实并不是 HTTP/1.1 核心规范的一部分，但确实一种得到广泛应用的扩展。但是需要注意的是，隧道中 HTTP 往返时都是采用明文传输，会被中间人“一览无余”。HTTP 代理承载的 HTTPS 流量，应用数据要等到 TLS 握手成功之后通过 Application Data 协议传输，中间节点无法得知用于流量加密的 master-secret，无法解密数据。而 CONNECT 暴露的域名和端口，对于普通的 HTTPS 请求来说，中间人一样可以拿到（IP 和端口很容易拿到，请求的域名可以通过 DNS Query 或者 TLS Client Hello 中的 Server Name Indication 拿到）。</p><p>上图展示了使用 CONNECT 方法建立起来一条到达网关隧道的过程，整个流程如下：</p><ol><li>在上图(a)中，客户端发送了一条 CONNECT 请求给隧道网关。客户端的 CONNECT 方法请求隧道网关打开一条TCP连接（这里是到标准 SSL 端口的443的连接）。</li><li>在上图(b)和上图(c)中创建 TCP 连接。</li><li>一旦建立了 TCP 连接，网关就会发送一条 <code>HTTP 200 Connection Establish</code>响应来通知客户端（上图(d)）。</li><li>此时，隧道建立，客户端通过 HTTP 隧道发送的所有数据都会直接转发输出 TCP 连接，服务器发送的所有数据都会通过 HTTP 隧道转发个给客户端。</li></ol><p>了解完原理后，再用 golang 实现一个支持 CONNECT 的代理也很简单，核心代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.SetFlags(log.LstdFlags | log.Lshortfile)</span><br><span class="line">l, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8081"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panic(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">client, err := l.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panic(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> handleClientRequest(client)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleClientRequest</span><span class="params">(client net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> client == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> client.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b [<span class="number">1024</span>]<span class="keyword">byte</span></span><br><span class="line">n, err := client.Read(b[:])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> method, host, address <span class="keyword">string</span></span><br><span class="line">fmt.Sscanf(<span class="keyword">string</span>(b[:bytes.IndexByte(b[:], <span class="string">'\n'</span>)]), <span class="string">"%s%s"</span>, &amp;method, &amp;host)</span><br><span class="line">hostPortURL, err := url.Parse(host)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hostPortURL.Opaque == <span class="string">"443"</span> &#123; <span class="comment">//https访问</span></span><br><span class="line">address = hostPortURL.Scheme + <span class="string">":443"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//http访问</span></span><br><span class="line"><span class="keyword">if</span> strings.Index(hostPortURL.Host, <span class="string">":"</span>) == <span class="number">-1</span> &#123; <span class="comment">//host不带端口， 默认80</span></span><br><span class="line">address = hostPortURL.Host + <span class="string">":80"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">address = hostPortURL.Host</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得了请求的host和port，就开始拨号吧</span></span><br><span class="line">server, err := net.Dial(<span class="string">"tcp"</span>, address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> method == <span class="string">"CONNECT"</span> &#123;</span><br><span class="line">fmt.Fprint(client, <span class="string">"HTTP/1.1 200 Connection established\r\n\r\n"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">server.Write(b[:n])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进行转发</span></span><br><span class="line"><span class="keyword">go</span> io.Copy(server, client)</span><br><span class="line">io.Copy(client, server)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码运行后，会在本地 <code>8081</code>端口开启 HTTP 代理服务，这个服务从 CONNECT 请求报文中解析出域名和端口，创建到服务端的 TCP 连接，并和 CONNECT 请求中的 TCP 连接串起来，最后再响应一个 Connection Established 响应。修改浏览器的 HTTP 代理为 <code>127.0.0.1:8081</code> 后再访问 HTTPS 网站，代理可以正常工作。</p><h2 id="二、反向代理（Reverse-Proxy）"><a href="#二、反向代理（Reverse-Proxy）" class="headerlink" title="二、反向代理（Reverse Proxy）"></a>二、反向代理（Reverse Proxy）</h2><p>上文说到，正向代理是一个位于客户端和目标服务器之间的代理服务器(中间服务器)。为了从原始服务器取得内容，客户端向代理服务器发送一个请求，并且指定目标服务器，之后代理向目标服务器转交并且将获得的内容返回给客户端。正向代理的情况下客户端必须要进行一些特别的设置才能使用。</p><p>而反向代理正好相反。对于客户端来说，反向代理就好像目标服务器。并且客户端不需要进行任何设置。客户端向反向代理发送请求，接着反向代理判断请求走向何处，并将请求转交给客户端，使得这些内容就好似他自己一样，一次客户端并不会感知到反向代理后面的服务，也因此不需要客户端做任何设置，只需要把反向代理服务器当成真正的服务器就好了。你看，这就是我们所熟知的 Nginx 扮演的角色。</p><p>使用反向代理服务器的主要作用如下：</p><ol><li>保护和隐藏原始资源服务器</li><li>负载均衡</li></ol><p>当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器的时候，让不同的代理服务器去应答不同的用户，然后发送不同用户需要的资源。当然反向代理服务器像正向代理服务器一样拥有缓存的作用，它可以缓存原始资源服务器的资源，而不是每次都要向原始资源服务器请求数据，特别是一些静态的数据，比如图片和文件。如果这些反向代理服务器能够做到和用户来自同一个网络，那么用户访问反向代理服务器，就会得到很高质量的速度。这正是 CDN 技术的核心。现在我们不谈 CDN，主要聊聊反向代理。</p><p>编写反向代理服务器，用 golang 来实现的话，Golang 给我们提供了编写代理的框架：<a href="https://golang.org/pkg/net/http/httputil/#ReverseProxy" target="_blank" rel="noopener"><code>httputil.ReverseProxy</code></a>。我们可以用非常简短的代码来实现自己的代理，并且内部的细节问题都已经被很好地处理了。</p><p>这部分我们会实现一个简单的反向代理，它能够对请求实现负载均衡，随机地把请求发送给某些配置好的后端服务器。使用 <code>httputil.ReverseProxy</code> 编写反向代理最重要的就是实现自己的 <code>Director</code> 对象，这是 <code>GoDoc</code> 对它的介绍：</p><blockquote><p>Director must be a function which modifies the request into a new request to be sent using Transport.<br>Its response is then copied back to the original client unmodified.<br>Director must not access the provided Request after returning.</p></blockquote><p>简单来说，<code>Director</code> 是一个函数，它接受一个请求作为参数，然后对其进行修改。修改后的请求会实际发送给服务器端，我们实现自己的<code>Director</code>函数，修改请求的 Scheme 和 Host ，就能实现负载均衡的效果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httputil"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMultipleHostsReverseProxy</span><span class="params">(targets []*url.URL)</span> *<span class="title">httputil</span>.<span class="title">ReverseProxy</span></span> &#123;</span><br><span class="line">director := <span class="function"><span class="keyword">func</span><span class="params">(req *http.Request)</span></span> &#123;</span><br><span class="line">target := targets[rand.Int()%<span class="built_in">len</span>(targets)]</span><br><span class="line">req.URL.Scheme = target.Scheme</span><br><span class="line">req.URL.Host = target.Host</span><br><span class="line">req.URL.Path = target.Path</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;httputil.ReverseProxy&#123;Director: director&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">proxy := NewMultipleHostsReverseProxy([]*url.URL&#123;</span><br><span class="line">&#123;</span><br><span class="line">Scheme: <span class="string">"http"</span>,</span><br><span class="line">Host:   <span class="string">"localhost:80"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">Scheme: <span class="string">"http"</span>,</span><br><span class="line">Host:   <span class="string">"localhost:8080"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">":9090"</span>, proxy))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码运行后，会在本地 <code>9090</code>端口开启 HTTP 代理服务，这个服务会随机的将请求交给本地 <code>80</code>端口和<code>8080</code>端口的服务去执行，在浏览器中直接访问  <a href="localhost:9090" target="_blank" rel="noopener">localhost:9090</a>，多刷新几次就能看到两个真正的服务器提供的资源和页面了。以上只是一个简单的演示和试验，没有错误处理，没有负载均衡算法，没有动态管理后端服务器等等，但却是反向代理的实质和核心。</p><h2 id="三、透明代理（Transparent-proxy）"><a href="#三、透明代理（Transparent-proxy）" class="headerlink" title="三、透明代理（Transparent proxy）"></a>三、透明代理（Transparent proxy）</h2><p>如果把正向代理、反向代理和透明代理按照人类血缘关系来划分的话。那么正向代理和透明代理是很明显堂亲关系，而正向代理和反向代理就是表亲关系了 。</p><p>透明代理的意思是客户端根本不需要知道有代理服务器的存在，它改编你的<code>request fields</code>（报文），并会传送真实 IP。注意，加密的透明代理则是属于匿名代理，意思是不用设置使用代理了。透明代理实践的例子就是时下很多公司使用的行为管理软件。</p><p>透明代理技术中的透明是指客户端感觉不到代理的存在，不需要在浏览器中设置任何代理，客户只需要设置缺省网关，客户的访问外部网络的数据包被发送到缺省网关，而这时缺省网关运行有一个代理服务器，数据实际上被被重定向到代理服务器的代理端口（如<code>8080</code>），即由本地代理服务器向外请求所需数据然后拷贝给客户端。理论上透明代理可以对任何协议通用。</p><p>但是在这种情况下客户端必须正确设置 DNS 服务器。因为现在浏览器不设置任何代理。则 DNS 查询必须由 browser 来解析，也就是要由客户端必须在 TCP/IP 中设置的正确的DNS服务器，其完成 dns 解析。</p><p>以上是关于我对 HTTP 代理的一点浅薄认识，&lt;完结&gt;。</p><p>参考文章链接：</p><p><a href="https://imququ.com/post/web-proxy.html" target="_blank" rel="noopener">HTTP 代理原理及实现（一）</a></p><p><a href="https://cizixs.com/2017/03/21/http-proxy-and-golang-implementation/" target="_blank" rel="noopener">HTTP代理原理和实现</a></p><p><a href="http://blog.51cto.com/z00w00/1031287" target="_blank" rel="noopener">图解正向代理、反向代理、透明代理</a></p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Google服务学习机器学习</title>
      <link href="/2018/04/19/%E4%BD%BF%E7%94%A8Google%E6%9C%8D%E5%8A%A1%E8%B7%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/04/19/%E4%BD%BF%E7%94%A8Google%E6%9C%8D%E5%8A%A1%E8%B7%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>机器学习项目运行时间比较长，跑起来非常耗费电脑资源，使用CPU基本是龟速前进。比较好的方法是使用GPU进行加速，然而GPU服务器，无论按小时计费还是按秒计费都非常贵，毕竟资源有限。最近发现，Google拥有一项免费云端机器学习服务，使用的GPU为Tesla K80，效果还是很不错的。</p><a id="more"></a><p>这项服务就是Google Colab，全名Colaboratory，类似于一个远端的jupyter notebook。你可以用它来提高Python技能，也可以用Keras、TensorFlow、PyTorch、OpenCV等等流行的深度学习库来练练手，开发深度学习应用。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="必须拥有的东西"><a href="#必须拥有的东西" class="headerlink" title="必须拥有的东西"></a>必须拥有的东西</h3><ul><li>梯子，保证能访问“外网”</li><li>Google账号，使用Google Drive存储文件和数据。</li></ul><h3 id="在Google-Drive上创建文件夹"><a href="#在Google-Drive上创建文件夹" class="headerlink" title="在Google Drive上创建文件夹"></a>在Google Drive上创建文件夹</h3><p>Colab用的数据都存储在Google Drive云端硬盘上，所以，我们需要先指定要在Google Drive上用的文件夹。</p><p>比如说，可以在Google Drive上创建一个“app”文件夹，或者其他什么名字，也可以选择Colab笔记本默认的文件夹。</p><h3 id="新建Colab笔记本"><a href="#新建Colab笔记本" class="headerlink" title="新建Colab笔记本"></a>新建Colab笔记本</h3><p>在刚刚创建的app文件夹里点击右键，选择“More”，然后从菜单里选择“Colaboratory”，这样就新建出了一个Colab笔记本。Colab笔记本使用非常方便，和jupyter notebook的使用一模一样。</p><h3 id="设置免费GPU"><a href="#设置免费GPU" class="headerlink" title="设置免费GPU"></a>设置免费GPU</h3><p>在笔记本里点Edit&gt;Notebook settings（编辑&gt;笔记本设置），或者Runtime&gt;Change runtime type（运行时&gt;改变运行时类型），然后在Hardware accelerator（硬件加速器）一栏选择GPU。</p><p>然后，就可以使用Google Colab愉快的玩耍了。</p><h2 id="运行基本Python代码"><a href="#运行基本Python代码" class="headerlink" title="运行基本Python代码"></a>运行基本Python代码</h2><p>因为默认已经装好了一些机器学习常用的框架，所以可以直接上手。试着在代码单元格中使用python代码，如使用numpy运算库等，运行结果如你所料。</p><h2 id="用Colab运行-py文件"><a href="#用Colab运行-py文件" class="headerlink" title="用Colab运行.py文件"></a>用Colab运行.py文件</h2><h3 id="Google-Drive授权"><a href="#Google-Drive授权" class="headerlink" title="Google Drive授权"></a>Google Drive授权</h3><p>先运行下面这些代码，来安装必要的库、执行授权。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">!apt-get install -y -qq software-properties-common python-software-properties module-init-tools</span><br><span class="line">!add-apt-repository -y ppa:alessandro-strada/ppa <span class="number">2</span>&gt;&amp;<span class="number">1</span> &gt; /dev/null</span><br><span class="line">!apt-get update -qq <span class="number">2</span>&gt;&amp;<span class="number">1</span> &gt; /dev/null</span><br><span class="line">!apt-get -y install -qq google-drive-ocamlfuse fuse</span><br><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> auth</span><br><span class="line">auth.authenticate_user()</span><br><span class="line"><span class="keyword">from</span> oauth2client.client <span class="keyword">import</span> GoogleCredentials</span><br><span class="line">creds = GoogleCredentials.get_application_default()</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line">!google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125; &lt; /dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span> | grep URL</span><br><span class="line">vcode = getpass.getpass()</span><br><span class="line">!echo &#123;vcode&#125; | google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125;</span><br></pre></td></tr></table></figure><p>看见那个链接之后，点击它，复制验证码并粘贴到文本框里,确认后就可以看到授权成功的信息了。</p><p>授权完成后，就可以挂载Google Drive了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!mkdir -p drive</span><br><span class="line">!google-drive-ocamlfuse drive</span><br></pre></td></tr></table></figure><p>每隔一段时间之后，colab给分配的环境会被自动初始化，下次进来得重新挂载google drive，以上代码几乎每次打开都得执行。</p><p>Colab 自带了 Tensorflow、Matplotlib、Numpy、Pandas 等深度学习基础库。如果还需要其他依赖，如 Keras，可以新建代码块，输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装最新版本Keras</span></span><br><span class="line"><span class="comment"># https://keras.io/</span></span><br><span class="line">!pip install keras</span><br><span class="line"><span class="comment"># 指定版本安装</span></span><br><span class="line">!pip install keras==<span class="number">2.0</span><span class="number">.9</span></span><br><span class="line"><span class="comment"># 安装 OpenCV</span></span><br><span class="line"><span class="comment"># https://opencv.org/</span></span><br><span class="line">!apt-get -qq install -y libsm6 libxext6 &amp;&amp; pip install -q -U opencv-python</span><br><span class="line"><span class="comment"># 安装 Pytorch</span></span><br><span class="line"><span class="comment"># http://pytorch.org/</span></span><br><span class="line">!pip install -q http://download.pytorch.org/whl/cu75/torch<span class="number">-0.2</span><span class="number">.0</span>.post3-cp27-cp27mu-manylinux1_x86_64.whl torchvision</span><br><span class="line"><span class="comment"># 安装 XGBoost</span></span><br><span class="line"><span class="comment"># https://github.com/dmlc/xgboost</span></span><br><span class="line">!pip install -q xgboost</span><br><span class="line"><span class="comment"># 安装 7Zip</span></span><br><span class="line">!apt-get -qq install -y libarchive-dev &amp;&amp; pip install -q -U libarchive</span><br><span class="line"><span class="comment"># 安装 GraphViz 和 PyDot</span></span><br><span class="line">!apt-get -qq install -y graphviz &amp;&amp; pip install -q pydot</span><br></pre></td></tr></table></figure><p>将mnist_cnn.py文件上传到位于Google云端硬盘上的应用文件夹：</p><p>运行下面的代码，用MNIST数据集训练一个简单的卷积神经网络：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!python3 drive/app/mnist_cnn.py</span><br></pre></td></tr></table></figure><p>从结果中可以看到，每个epoch只需要11秒。</p><h3 id="下载泰坦尼克数据集"><a href="#下载泰坦尼克数据集" class="headerlink" title="下载泰坦尼克数据集"></a>下载泰坦尼克数据集</h3><p>想按照链接下载.csv文件到app文件夹，只需运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!wget https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/datasets/Titanic.csv -P drive/app</span><br></pre></td></tr></table></figure><p>也可以直接将.csv文件上传到app文件夹。</p><h2 id="一些小的代码片段"><a href="#一些小的代码片段" class="headerlink" title="一些小的代码片段"></a>一些小的代码片段</h2><p>在笔记本的左侧，打开三角形的指示器，在代码段目录下，你可以看到一些Google提供的小脚本，方便你的一些操作。</p><p>例如，你可以安装7zip reader</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!apt-get -qq install -y libarchive-dev &amp;&amp; pip install -q -U libarchiv</span><br><span class="line"><span class="keyword">import</span> libarchive</span><br></pre></td></tr></table></figure><p>也可以保存数据到Google Drive</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install the PyDrive wrapper &amp; import libraries.</span></span><br><span class="line"><span class="comment"># This only needs to be done once in a notebook.</span></span><br><span class="line">!pip install -U -q PyDrive</span><br><span class="line"><span class="keyword">from</span> pydrive.auth <span class="keyword">import</span> GoogleAuth</span><br><span class="line"><span class="keyword">from</span> pydrive.drive <span class="keyword">import</span> GoogleDrive</span><br><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> auth</span><br><span class="line"><span class="keyword">from</span> oauth2client.client <span class="keyword">import</span> GoogleCredentials</span><br><span class="line"></span><br><span class="line"><span class="comment"># Authenticate and create the PyDrive client.</span></span><br><span class="line"><span class="comment"># This only needs to be done once in a notebook.</span></span><br><span class="line">auth.authenticate_user()</span><br><span class="line">gauth = GoogleAuth()</span><br><span class="line">gauth.credentials = GoogleCredentials.get_application_default()</span><br><span class="line">drive = GoogleDrive(gauth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create &amp; upload a text file.</span></span><br><span class="line">uploaded = drive.CreateFile(&#123;<span class="string">'title'</span>: <span class="string">'Sample file.txt'</span>&#125;)</span><br><span class="line">uploaded.SetContentString(<span class="string">'Sample upload file content'</span>)</span><br><span class="line">uploaded.Upload()</span><br><span class="line">print(<span class="string">'Uploaded file with ID &#123;&#125;'</span>.format(uploaded.get(<span class="string">'id'</span>)))</span><br></pre></td></tr></table></figure><p>要查看你在Colab里是不是真的在用GPU，可以运行以下代码来交叉检查：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf.test.gpu_device_name()</span><br></pre></td></tr></table></figure><p>要想知道你在使用那块GPU，使用下面的代码即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.python.client <span class="keyword">import</span> device_lib</span><br><span class="line">device_lib.list_local_devices()</span><br></pre></td></tr></table></figure><p>按照输出结果来看，其实Colab只有一个CPU和一块Tesla K80的GPU，但这对我们开始足够了。</p><p>查看RAM和CPU信息：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!cat /<span class="meta">proc</span>/meminfo</span><br><span class="line">!cat /<span class="meta">proc</span>/cpuinfo</span><br></pre></td></tr></table></figure><p>在colab环境中，我们挂载Google drive的位置是/content/drive/ 。colab中的notebook和py文件默认都是以/content/ 作为工作目录，如果我们要切换工作路径。需要执行一下命令手动切换工作目录，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="string">"/content/drive/path/to/file(s)"</span></span><br><span class="line">os.chdir(path)</span><br><span class="line">os.list(path)</span><br></pre></td></tr></table></figure><p>遍历目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出根目录的所有文件</span></span><br><span class="line"><span class="comment"># "q" 查询条件教程详见：https://developers.google.com/drive/v2/web/search-parameters</span></span><br><span class="line">file_list = drive.ListFile(&#123;<span class="string">'q'</span>: <span class="string">"'root' in parents and trashed=false"</span>&#125;).GetList()</span><br><span class="line"><span class="keyword">for</span> file1 <span class="keyword">in</span> file_list:</span><br><span class="line">  print(<span class="string">'title: %s, id: %s, mimeType: %s'</span> % (file1[<span class="string">'title'</span>], file1[<span class="string">'id'</span>], file1[<span class="string">"mimeType"</span>]))</span><br></pre></td></tr></table></figure><p>我们看到的控制台打印结果中，其中的id是我们获取文件的唯一标识。</p><p>读取文件内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#for .txt file</span></span><br><span class="line">file = drive.CreateFile(&#123;<span class="string">'id'</span>: <span class="string">"替换成你的 .txt 文件 id"</span>&#125;) </span><br><span class="line">file.GetContentString()</span><br><span class="line"></span><br><span class="line"><span class="comment">#for .csv file</span></span><br><span class="line"><span class="comment">#GetContentString()只能打印第一行数据</span></span><br><span class="line">file = drive.CreateFile(&#123;<span class="string">'id'</span>: <span class="string">"替换成你的 .csv 文件 id"</span>&#125;) </span><br><span class="line"><span class="comment">#这里的下载操作只是缓存，不会在你的Google Drive 目录下多下载一个文件</span></span><br><span class="line">file.GetContentFile(<span class="string">'iris.csv'</span>, <span class="string">"text/csv"</span>) </span><br><span class="line"><span class="comment"># 直接打印文件内容</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'iris.csv'</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">print</span> f.readlines()</span><br><span class="line"><span class="comment"># 用 pandas 读取</span></span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line">pd.read_csv(<span class="string">'iris.csv'</span>, index_col=[<span class="number">0</span>,<span class="number">1</span>], skipinitialspace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>Colab 会直接以表格的形式输出结果</p><p>写文件操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文本文件</span></span><br><span class="line">uploaded = drive.CreateFile(&#123;<span class="string">'title'</span>: <span class="string">'示例.txt'</span>&#125;)</span><br><span class="line">uploaded.SetContentString(<span class="string">'测试内容'</span>)</span><br><span class="line">uploaded.Upload()</span><br><span class="line">print(<span class="string">'创建后文件 id 为 &#123;&#125;'</span>.format(uploaded.get(<span class="string">'id'</span>)))</span><br></pre></td></tr></table></figure><p>下载文件到本地</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'example.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">  f.write(<span class="string">'测试内容'</span>)</span><br><span class="line">files.download(<span class="string">'example.txt'</span>)</span><br></pre></td></tr></table></figure><p>至此，所有的介绍完毕，请开始你的机器学习吧，事不宜迟，赶快动手试试看。至于实战什么的，试着试着就知道咯，欢迎入坑！</p><h3 id="参考文章链接"><a href="#参考文章链接" class="headerlink" title="参考文章链接"></a>参考文章链接</h3><p><a href="https://zhuanlan.zhihu.com/p/33344222" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33344222</a></p><p><a href="https://segmentfault.com/a/1190000012731724" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012731724</a></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google </tag>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
